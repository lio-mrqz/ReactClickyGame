{"version":3,"sources":["components/GuessMessage/index.js","components/Nav/index.js","components/Score/index.js","components/ImgCard/index.js","components/GameArea/index.js","App.js","serviceWorker.js","index.js"],"names":["GuessMessage","react_default","a","createElement","Nav","props","className","href","components_GuessMessage","score","topScore","Score","state","increaseScore","_this","setState","components_Nav","this","Component","ImgCard","src","image","alt","id","onClick","console","log","error","GameArea","imageList","map","components_ImgCard","key","React","App","components_Score","components_GameArea","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6lBAUeA,MARf,WACI,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,kCCiBGC,MAlBf,SAAaC,GACX,OACIJ,EAAAC,EAAAC,cAAA,MAAIG,UAAU,0BACZL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,kBACZL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,eAAeC,KAAK,KAAjC,eAIFN,EAAAC,EAAAC,cAAA,MAAIG,UAAU,YACVL,EAAAC,EAAAC,cAACK,EAAD,OAEJP,EAAAC,EAAAC,cAAA,MAAIG,UAAU,YACdL,EAAAC,EAAAC,cAAA,mBAAWE,EAAMI,MAAjB,iBAAsCJ,EAAMK,aCSrCC,6MApBbC,MAAQ,CACNH,MAAO,KAGTI,cAAgB,WACdC,EAAKC,SAAS,CAAEN,MAAOK,EAAKF,MAAMH,MAAQ,6EAI1C,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACa,EAAD,CACEP,MAAOQ,KAAKL,MAAMH,MAClBC,SAAUO,KAAKL,MAAMH,gBAdXS,oBCWLC,MAbf,SAAiBd,GAIb,OACIJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,oBACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YAAYc,IAAKf,EAAMgB,MAAOC,IAAKjB,EAAMkB,GAAIC,QAAS,WAJzEC,QAAQC,IAAI,sBAKPD,QAAQE,UCkBNC,oNArBXhB,MAAQ,CACJiB,qFAIJ,OACI5B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACZW,KAAKL,MAAMiB,UAAUC,IAAI,SAAAT,GAAK,OAC/BpB,EAAAC,EAAAC,cAAC4B,EAAD,CACER,GAAIF,EAAME,GACVS,IAAKX,EAAME,GACXF,MAAOA,EAAMA,mBAbJY,IAAMf,kBCSdgB,MATf,WACE,OACEjC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgC,EAAD,MACAlC,EAAAC,EAAAC,cAACiC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f7fdde11.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction GuessMessage() {\r\n    return(\r\n        <div>\r\n            <h2>GuessMessage</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GuessMessage;","import React from \"react\";\r\nimport GuessMessage from \"../GuessMessage\";\r\nimport './style.css'\r\n\r\nfunction Nav(props) {\r\n  return (\r\n      <ul className=\"nav nav-pills nav-fill\">\r\n        <li className=\"brand nav-item\">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            ClickyGame\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n            <GuessMessage />\r\n        </li>\r\n        <li className=\"nav-item\">\r\n        <p>Score: {props.score} | Top Score: {props.topScore}</p>\r\n        </li>\r\n      </ul>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, {Component} from \"react\";\r\nimport Nav from \"../Nav\"\r\n// import ImgCard from \"../ImgCard\";\r\n\r\nclass Score extends Component {\r\n  state = {\r\n    score: 0\r\n  };\r\n\r\n  increaseScore = () => {\r\n    this.setState({ score: this.state.score + 1 })\r\n  };\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <Nav \r\n          score={this.state.score}\r\n          topScore={this.state.score}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Score;","import React from \"react\";\r\n\r\nfunction ImgCard(props) {\r\n    const imageClick = ()=> {\r\n        console.log('Clicked ImgCard')\r\n    }\r\n    return(\r\n        <div className=\"card text-center\">\r\n            <img className=\"img-fluid\" src={props.image} alt={props.id} onClick={()=>imageClick()}/>\r\n            {console.error()}\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default ImgCard;","import React from 'react'\r\nimport imageList from '../../imageList.json'\r\nimport ImgCard from '../ImgCard'\r\nimport './style.css'\r\n\r\nclass GameArea extends React.Component {\r\n    state = {\r\n        imageList,\r\n        // imageFolder\r\n    } \r\n    render() {\r\n    return(\r\n        <div className=\"wrapper\">\r\n          <div className=\"card-columns\">\r\n            {this.state.imageList.map(image => (\r\n            <ImgCard \r\n              id={image.id}\r\n              key={image.id}\r\n              image={image.image}\r\n            />\r\n            ))}\r\n          </div>\r\n        </div>\r\n    )\r\n    } \r\n}\r\n\r\nexport default GameArea;","import React from 'react';\nimport Score from './components/Score'\nimport GameArea from './components/GameArea'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Score />\n      <GameArea />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}